{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","items","i","push","shuffle","arr","selected","swap","length","Math","floor","random","class","this","map","item","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA4CeA,E,kDAvCb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAGT,IAAK,IAAIC,EAAI,EAAGA,GAAK,GAAIA,IACvB,EAAKF,MAAMC,MAAME,KAAKD,GAPP,OAUjB,EAAKF,MAAMC,MAAQ,EAAKG,QAAQ,EAAKJ,MAAMC,OAV1B,E,2CAanB,SAAQI,GAGN,IAFA,IAAIC,EAAUC,EAENL,EAAIG,EAAIG,OAAS,EAAGN,EAAI,EAAGA,IACjCI,EAAWG,KAAKC,MAAMD,KAAKE,UAAYT,EAAI,IAE3CK,EAAOF,EAAIH,GACXG,EAAIH,GAAKG,EAAIC,GACbD,EAAIC,GAAYC,EAGlB,OAAOF,I,oBAGT,WACE,OACE,qBAAKO,MAAM,YAAX,SACGC,KAAKb,MAAMC,MAAMa,KAAI,SAAAC,GAAI,OACxB,8BAAMA,a,GAjCEC,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f7798de3.chunk.js","sourcesContent":["import './App.css'\r\nimport React from 'react'\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      items: []\r\n    }\r\n\r\n    for (let i = 1; i <= 60; i++) {\r\n      this.state.items.push(i)\r\n    }\r\n\r\n    this.state.items = this.shuffle(this.state.items)\r\n  }\r\n\r\n  shuffle(arr) {\r\n    let selected, swap\r\n\r\n    for(let i = arr.length - 1; i > 0; i--) {\r\n      selected = Math.floor(Math.random() * (i + 1))\r\n\r\n      swap = arr[i]\r\n      arr[i] = arr[selected]\r\n      arr[selected] = swap\r\n    }\r\n\r\n    return arr\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"container\">\r\n        {this.state.items.map(item => (\r\n          <div>{item}</div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}